high="red", space ="Lab" )
head(new)
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point() +
scale_color_gradient2(midpoint=mid, low="blue", mid="white",
high="red", space ="Lab" )
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point() +
scale_color_gradient2(midpoint=0, low="blue", mid="white",
high="red", space ="Lab" )
# Con predicciones de un gam
mgam2d <- gam(r ~ s(beta) + s(cv), data = newdata)
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point() +
scale_color_gradient2(midpoint=-0.5, low="blue", mid="white",
high="red", space ="Lab" )
library(mgcv)
mgam2d <- gam(r ~ s(beta) + s(cv), data = newdata)
new <- expand.grid(cv = seq(min(cv), max(cv), length = 100),
beta = seq(min(beta), max(beta), length = 100))
newdata$z <- predict(mgam2d)
ggplot() +
geom_contour_filled(data = newdata, aes(x = beta, y = cv, z = z))
head(newdata)
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point() +
scale_color_gradientn(rainbow(5))
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point() +
scale_color_gradientn(colors = rainbow(5))
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.3) +
scale_color_gradientn(colors = rainbow(5))
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5))
ggplot() +
geom_contour_filled(data = newdata[1:1000,], aes(x = beta, y = cv, z = z))
ggplot(data = newdata[1:1000,], aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5))
sdev <- seq(0, 1, length = 10)
for(i in 1:nsim){
for(j in 1:10){
seeds <-  rpois(n = nplants, lambda = exp(beta[i]*scale(crop) +
rnorm(n = nplants, mean = 0, sd = sdev[j])))
fit <- rem*seeds
r[i, j] <- cor(rem, fit, method="spearman")
cv[i, j] <- 100*sd(seeds)/mean(seeds)
}
}
plot(cv,r)
head(cv)
newdata<-data.frame(cv=c(cv), beta=beta, r=c(r))
plot(newdata$beta,newdata$cv)
beta <- seq(-10, -10, length = nsim)
sdev <- seq(0, 1, length = 10)
for(i in 1:nsim){
for(j in 1:10){
seeds <-  rpois(n = nplants, lambda = exp(beta[i]*scale(crop) +
rnorm(n = nplants, mean = 0, sd = sdev[j])))
fit <- rem*seeds
r[i, j] <- cor(rem, fit, method="spearman")
cv[i, j] <- 100*sd(seeds)/mean(seeds)
}
}
newdata<-data.frame(cv=c(cv), beta=beta, r=c(r))
plot(newdata$beta,newdata$cv)
beta <- seq(-10, -10, length = nsim)
beta <- seq(-10, 10, length = nsim)
sdev <- seq(0, 4, length = 10)
for(i in 1:nsim){
for(j in 1:10){
seeds <-  rpois(n = nplants, lambda = exp(beta[i]*scale(crop) +
rnorm(n = nplants, mean = 0, sd = sdev[j])))
fit <- rem*seeds
r[i, j] <- cor(rem, fit, method="spearman")
cv[i, j] <- 100*sd(seeds)/mean(seeds)
}
}
newdata<-data.frame(cv=c(cv), beta=beta, r=c(r))
plot(newdata$beta,newdata$cv)
ggplot(data = newdata[1:1000,], aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5))
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5))
for(i in 1:nsim){
for(j in 1:10){
seeds <-  rpois(n = nplants, lambda = exp(beta[i]*scale(crop) ))
fit <- rem*seeds
r[i, j] <- cor(rem, fit, method="spearman")
cv[i, j] <- 100*sd(seeds)/mean(seeds)
}
}
newdata<-data.frame(cv=c(cv), beta=beta, r=c(r))
plot(newdata$beta,newdata$cv)
beta <- seq(-10, -1, length = nsim)
sdev <- seq(0, 4, length = 10)
beta <- seq(-10, -1, length = nsim)
sdev <- seq(0, 4, length = 10)
for(i in 1:nsim){
for(j in 1:10){
seeds <-  rpois(n = nplants, lambda = exp(beta[i]*scale(crop) +
rnorm(n = nplants, mean = 0, sd = sdev[j])))
fit <- rem*seeds
r[i, j] <- cor(rem, fit, method="spearman")
cv[i, j] <- 100*sd(seeds)/mean(seeds)
}
}
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5))
beta <- seq(-10, -1, length = nsim)
sdev <- seq(0, 4, length = 10)
for(i in 1:nsim){
for(j in 1:10){
seeds <-  rpois(n = nplants, lambda = exp(beta[i]*scale(crop) +
rnorm(n = nplants, mean = 0, sd = sdev[j])))
fit <- rem*seeds
r[i, j] <- cor(rem, fit, method="spearman")
cv[i, j] <- 100*sd(seeds)/mean(seeds)
}
}
newdata<-data.frame(cv=c(cv), beta=beta, r=c(r))
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5))
ggplot(data = newdata[1:1000,], aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5))
data <- read.csv2("C:/RD/Passiflora 2017-2018 La Plata.csv")
data <- read.csv2("C:/RD/Passiflora 2017-2018 La Plata.csv")
data$peso.xsem <- as.numeric(data$peso.xsem)
data$peso.sem <- as.numeric(data$peso.sem)
data$diam <- as.numeric(data$diam)
data$long <- as.numeric(data$long)
data$peso.tot <- as.numeric(data$peso.tot)
head(data)
library(tidyverse)
library(ggplot2)
data <- read.table("C:/RD/Data Passiflora AOS_2020_plants.txt", head=T)
head(data)
plot(data$mean.nseeds, data$frunar)
m <- glmer.nb(frunar ~ mean.nseeds + (1|idpoblacion), data=data)
library(lme4)
summary(m)
m <- glmer.nb(frunar ~ mean.nseeds + (1|idpoblacion), data=data)
summary(m)
m <- glmer.nb(frunar ~ scale(mean.nseeds) + (1|idpoblacion), data=data)
summary(m)
cv <- c()
r <- c()
nsim <- 10000
nplants <- 500
crop <- rnegbin(n = nplants, mu = 250, theta = 10)
rem <- exp(2*scale(crop) + rnorm(nplants, 0, 0.5)) # positive relationship with crop
beta <- seq(-5, 0, length = nsim)
for(i in 1:nsim){
seeds <-  rnegbin(n = nplants, mu = exp(beta[i]*scale(crop)), theta=10)
#seeds <- rnorm(n = nplants, mean = 50 + beta[i]*scale(crop), sd = 4)
fit <- rem*seeds
r[i] <- cor(rem, fit, method="spearman")
cv[i] <- 100*sd(seeds)/mean(seeds)
}
Mgam <- gam(r ~ s(beta))
newdata <- data.frame(beta = seq(min(beta), max(beta), length=1000))
newdata$predgam <- predict(Mgam, newdata = newdata)
df <- data.frame(beta,r)
ggplot() + #3.5x3in
geom_point(data=df, aes(x=beta,y=r),size=3,alpha=.1,col="blue")+
geom_line(data=newdata, aes(x=beta,y=predgam),col="firebrick",size=1.5) +
xlab(expression(paste(beta, " (seeds ~ crop)"))) +
ylab("Spearman correlation (fruit removal, fitness)")
nsim <- 1000
cv <-matrix(NA, nrow = nsim, ncol = 10)
r <- matrix(NA, nrow = nsim, ncol = 10)
nplants <- 500
crop <- rnegbin(n = nplants, mu = 250, theta = 10)
rem <- exp(2*scale(crop) + rnorm(nplants, 0, 0.5)) # positive relationship with crop
beta <- seq(-10, 0, length = nsim)
sdev <- seq(0, 4, length = 10)
for(i in 1:nsim){
for(j in 1:10){
seeds <-  rpois(n = nplants, lambda = exp(beta[i]*scale(crop) +
rnorm(n = nplants, mean = 0, sd = sdev[j])))
fit <- rem*seeds
r[i, j] <- cor(rem, fit, method="spearman")
cv[i, j] <- 100*sd(seeds)/mean(seeds)
}
}
newdata<-data.frame(cv=c(cv), beta=beta, r=c(r))
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5))
ggplot(data = newdata[1:1000,], aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5))
ggplot(data = newdata[1:1000,], aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5)) +
xlab(expression(paste(beta, " (seeds ~ crop)"))) +
ylab("CV seed number (%)") +
labs(col = "Spearman correlation\n(fruit removal, fitness)")
ggplot(data = newdata, aes(x = beta, y = cv, color = r)) +
geom_point(alpha=0.4) +
scale_color_gradientn(colors = rainbow(5)) +
xlab(expression(paste(beta, " (seeds ~ crop)"))) +
ylab("CV seed number (%)") +
labs(col = "Spearman correlation\n(fruit removal, fitness)")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='facuxpalacio',
token='4DD42851518826F58EDB1F11BFBB2BB7',
secret='<SECRET>')
rsconnect::setAccountInfo(name='facuxpalacio',
token='4DD42851518826F58EDB1F11BFBB2BB7',
secret='uDj54sk5BO91LLxggImDD6+rr7fiVdHocyZ+ysOZ')
library(rsconnect)
deployApp()
shiny::runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
library(BAT)
library(BAT)
install.packages("xfun")
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
citation("BAT")
shiny::runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
?kernel.dispersion
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
?dist
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
4+4
4+4
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
shiny::runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
bird_traits <- read.table("C:/RD/bird_traits.txt",head=T)
bird_traits$body.mass <- as.numeric(bird_traits$body.mass)
comm <- as.matrix(read.csv2("C:/RD/bird_counts.csv"))
traits <- as.matrix(bird_traits[,-1])
rownames(traits) <- colnames(comm)
# Example with 3 sites
hvlist <- kernel.build(comm = comm[1:3,], trait = traits, axes = 2,
method = "gaussian", abund = TRUE, samples.per.point = 100)
kernelFD <- kernel.alpha(hvlist)
kerneleve <- kernel.evenness(hvlist)
kerneldisp <- kernel.dispersion(hvlist, func = "divergence")
rich <- kernelFD$FD
head(kernelFD)
rich <- kernelFD
reg <- kerneleve
div <- kerneldisp
df <- data.frame(Richness = rich, Regularity = reg, Divergence = div)
my_fn <- function(data, mapping, ...){
p <- ggplot(data = df, mapping = mapping) +
geom_point(alpha = 0.5, size = 2) +
geom_smooth(method = lm, fill = "blue", color = "blue", ...)
p
}
ggpairs(df, lower = list(continuous = my_fn), upper = list(continuous = "cor"))
class(rich)
le
?scale
x<-rnorm(10)
x[1]<-NA
x
scale(x)
x1<-scale(x,na.rm=T)
x<-selected.traits
selected.traits<-x
selected.traits
scale(na.omit(x))
x<-rnorm(10)
x[1]<-NA
x
z<-scale(x)
z1<-scale(na.omit(x))
cbind(z,z1)
z
z1
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp()
rownames(traits) <- make.names(bird_traits[,1],unique=T)
head(traits)
?make.names
traits2<-traits[-1,]
nrow(traits2)
nrow(bird_traits)
which(is.na(x), arr.ind = TRUE)
x[5]<-NA
which(is.na(x), arr.ind = TRUE)
which(is.na(x), arr.ind = F)
?which
which(is.na(traits), arr.ind = F)
traits[integer(0),1]
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
bird_traits <- read.table("C:/RD/bird_traits.txt",head=T)
bird_traits <- read.csv2("C:/RD/Autralian_outcrops.csv",head=T)
traits <- read.csv2("C:/RD/Autralian_outcrops.csv")
traits <- read.csv2("C:/RD/Australian_outcrops.csv")
head(traits)
library(ggplot2)
library(factoextra)
dist.matrix <- vegdist(traits)
library(vegan)
dist.matrix <- vegdist(traits)
names(traits)
dist.matrix <- vegdist(traits[,5:7])
traits1 <- traits[,5:7]
dist.matrix <- vegdist(traits1)
str(traits1)
traits$SLA <- as.numeric(traits$SLA)
traits$LDMC <- as.numeric(traits$LDMC)
traits$Leaf_area <- as.numeric(traits$Leaf_area)
traits1 <- traits[,5:7]
dist.matrix <- vegdist(traits1)
dist.matrix <- vegdist(traits1, na.rm = TRUE)
cluster <- hclust(dist.matrix)
head(dist.matrix)
dist.matrix
traits2 <- na.omit(traits1)
dist.matrix <- vegdist(traits2)
cluster <- hclust(dist.matrix)
fviz_dend(cluster, horiz = TRUE, main = "",
color_labels_by_k = TRUE,
rect_fill = input$rectangle,
xlab = "Species", ylab = "Dissimilarity",
ggtheme = theme_minimal())
fviz_dend(cluster, horiz = TRUE, main = "",
color_labels_by_k = TRUE,
xlab = "Species", ylab = "Dissimilarity",
ggtheme = theme_minimal())
head(traits)
rowsNA <- which(is.na(traits), arr.ind = TRUE)
rowsNA
rowsNA <- which(is.na(traits))
rowsNA
rowsNA <- which(is.na(traits), arr.ind = FALSE)
rowsNA
rowsNA <- which(is.na(traits), arr.ind = TRUE)[,1]
rowsNA
rowsNA <- unique(which(is.na(traits), arr.ind = TRUE)[, 1])
rowsNA
rownames(traits2) <- make.names(traits[-rowsNA, 1], unique = TRUE)
head(traits2)
dist.matrix <- vegdist(traits2)
cluster <- hclust(dist.matrix)
fviz_dend(cluster, horiz = TRUE, main = "",
color_labels_by_k = TRUE,
xlab = "Species", ylab = "Dissimilarity",
ggtheme = theme_minimal())
rowsNA <- unique(which(is.na(traits2), arr.ind = TRUE)[, 1])
rowsNA
rownames(traits2) <- make.names(traits[-rowsNA, 1], unique = TRUE)
rownames(traits2) <- make.names(traits2[, 1], unique = TRUE)
head(traits2)
rownames(traits2) <- make.names(traits1[, 1], unique = TRUE)
rownames(traits1) <- make.names(traits1[, 1], unique = TRUE)
head(traits1)
rownames(traits) <- make.names(traits[, 1], unique = TRUE)
head(traits)
'vegdist'
?vegdist
dist.matrix <- vegdist(traits)
dist.matrix <- vegdist(traits, method = "gower")
dist.matrix <- vegdist(traits, method = "gower", na.rm = TRUE)
dist.matrix <- vegdist(traits[, 5:7], method = "gower")
dist.matrix <- vegdist(traits[, 5:7], method = "gower", na.rm = TRUE)
cluster <- hclust(dist.matrix)
data <- data.frame(x1 = rnorm(10), x2 = rnorm(10), x3 = rnorm(10))
data[1,3] <- NA
data[2,5] <- NA
data[5,2] <- NA
data
data <- data.frame(sp = letters[1:10], x1 = rnorm(10), x2 = rnorm(10), x3 = rnorm(10))
data
data[1,3] <- NA
data[5,2] <- NA
rownames(data) <- make.names(data, unique = TRUE)
rownames(data) <- make.names(data[,1], unique = TRUE)
data
dist.matrix <- vegdist(traits[, 5:7], method = "gower", na.rm = TRUE)
dist.matrix
data <- data.frame(sp = letters[1:10], x1 = rnorm(10), x2 = rnorm(10), x3 = rnorm(10))
data[1,3] <- NA
data[5,2] <- NA
rownames(data) <- make.names(data[,1], unique = TRUE)
dist.matrix <- vegdist(data[,-1], method = "gower", na.rm = TRUE)
cluster <- hclust(dist.matrix)
dist.matrix
dist.matrix <- vegdist(data[,-1], method = "bray", na.rm = TRUE)
dist.matrix <- vegdist(data[,-1], method = "euclidean", na.rm = TRUE)
cluster <- hclust(dist.matrix)
dist.matrix
dist.matrix <- vegdist(data[,-1], method = "euclidean")
data <- data.frame(sp = letters[1:50], x1 = rnorm(50), x2 = rnorm(50), x3 = rnorm(50))
data[1,3] <- NA
data[2,30] <- NA
data[30,2] <- NA
data[45,1] <- NA
write.csv(data, "data.csv")
shiny::runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
traits2 <- na.omit(data)
rowsNA <- unique(which(is.na(data), arr.ind = TRUE)[1, ])
rowsNA
rownames(traits2) <- make.names(traits2[-rowsNA, 1], unique = TRUE)
head(traits2)
rowsNA
make.names(traits2[-rowsNA, 1], unique = TRUE)
rownames(traits2)
rownames(traits2) <- make.names(traits2[-rowsNA, 1], unique = TRUE)
nrow(traits2)
rownames(traits2) <- make.names(data[-rowsNA, 1], unique = TRUE)
nrow(data)
nrow(traits2)
traits2
head(data)
data
traits2 <- na.omit(data[,2:4])
nrow(traits2)
rowsNA <- unique(which(is.na(data[,2:4]), arr.ind = TRUE)[1, ])
rowsNA
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
data <- data.frame(sp = letters[1:10], x1 = rnorm(10), x2 = rnorm(10), x3 = rnorm(10))
data[1,3] <- NA
data[5,2] <- NA
traits <- data.frame(sp = letters[1:10], x1 = rnorm(10), x2 = rnorm(10), x3 = rnorm(10))
traits[1,3] <- NA
traits[5,2] <- NA
traits1 <- scale(traits[,3:5])
traits1 <- scale(traits[,2:4])
traits1
class(traits1)
traits1 <- traits[,2:4]
traits1 <- scale(traits[,2:4])
rowsNA <- unique(which(is.na(traits[,2:4]), arr.ind = TRUE)[1, ])
rowsNA
traits2 <- na.omit(traits1)
rownames(traits2) <- make.names(trait_dataset()[-rowsNA, 1], unique = TRUE)
selected.traits <- traits[,2:4]
traits1 <- scale(selected.traits) # estandarizado
traits1 <- selected.traits # sin estandarizar
traits1 <- scale(selected.traits) # estandarizado
traits2 <- na.omit(traits1)
rowsNA <- unique(which(is.na(selected.traits), arr.ind = TRUE)[1, ])
rowsNA
rownames(traits2) <- make.names(traits[-rowsNA, 1], unique = TRUE)
traits2
dist.matrix <- vegdist(traits2, method = "euclidean", na.rm = TRUE)
cluster <- hclust(dist.matrix)
fviz_dend(cluster, horiz = TRUE, main = "",
color_labels_by_k = TRUE,
xlab = "Species", ylab = "Dissimilarity",
ggtheme = theme_minimal())
traits1 <- selected.traits # sin estandarizar
traits2 <- traits1
rownames(traits2) <- make.names(data, unique = TRUE)
nrow(data)
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
rownames(traits2) <- make.names(data[,1], unique = TRUE)
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
z<-as.data.frame(scale(data[,2:4]))
head(z)
dist.matrix <- vegdist(z, method = "euclidean", na.rm = TRUE)
cluster <- hclust(dist.matrix)
fviz_dend(cluster, horiz = TRUE, main = "",
color_labels_by_k = TRUE,
xlab = "Species", ylab = "Dissimilarity",
ggtheme = theme_minimal())
traits2 <- na.omit(data[,2:4])
rowsNA <- unique(which(is.na(data[,2:4]), arr.ind = TRUE)[1, ])
rowsNA
nrow(traits2)
rownames(traits2) <- make.names(data[-rowsNA, 1], unique = TRUE)
nrow(traits2)
traits2
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
shiny::runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
traits <- data.frame(sp = letters[1:10], x1 = rnorm(10), x2 = rnorm(10), x3 = rnorm(10))
traits[1,3] <- NA
traits[5,2] <- NA
selected.traits <- traits[,2:4]
dist.matrix <- vegdist(traits2, method = "euclidean", na.rm = TRUE)
traits2 <- traits1
traits1 <- scale(selected.traits) # estandarizado
traits2 <- traits1
dist.matrix <- vegdist(traits2, method = "euclidean", na.rm = TRUE)
pco <- wcmdscale(dist.matrix)
pcoa.axes <- as.data.frame(pco$points)
pco <- wcmdscale(dist.matrix, eig = T)
pcoa.axes <- as.data.frame(pco$points)
head(traits2)
efit <- envfit(ord = pco, env = traits2)
efit <- envfit(ord = pco, env = na.omit(traits2))
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
shiny::runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
# Si hay na pero los quiero dejar
traits <- data.frame(sp = letters[1:10], x1 = rnorm(10), x2 = rnorm(10), x3 = rnorm(10))
is.na(traits)
length(is.na(traits))
sum(is.na(traits))
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')
runApp('C:/Users/54221/Dropbox/GitHub/FD-protocol-shiny-app/R')

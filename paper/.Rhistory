formula = y ~ x,
geom = "smooth", size = 2) + theme_bw()
ggplot(data = plantas, aes(x = LDMC)) +
xlab("LDMC") + ylab("Frecuencia") +
geom_histogram()
head(plantas)
ldmc <- read.table("C:/RD/LDMC bosque.txt",head=T)
ldmc <- read.table("C:/RD/LDMC bosque.txt",head=T)
head(ldmc)
ldmc$LDMC <- ldmc$Peso_seco/ldmc$Peso_humedo*1000
ggplot(data = ldmc, aes(x = LDMC)) +
xlab("LDMC") + ylab("Frecuencia") +
geom_histogram()
ggplot(data = ldmc, aes(x = LDMC)) +
xlab("LDMC") + ylab("Frecuencia") +
geom_histogram(bins = 10)
ggplot(data = ldmc, aes(x = LDMC)) +
xlab("LDMC") + ylab("Frecuencia") +
geom_histogram(bins = 10, color="black", fill="white")
ggplot(data = ldmc, aes(x = LDMC)) +
xlab("LDMC (mg/g)") + ylab("Frecuencia") +
geom_histogram(bins = 10, color="black", fill="white") +
theme_bw()
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
library(rsconnect)
rsconnect::setAccountInfo(name='facuxpalacio', token='4DD42851518826F58EDB1F11BFBB2BB7', secret='uDj54sk5BO91LLxggImDD6+rr7fiVdHocyZ+ysOZ')
deployApp()
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
install.packages("pkgbuild")
library(unmarked)
library(AICcmodavg)
library(MuMIn)
pica <- read.table("C:/RD/censos_picaflores.txt",head=T)
pica_long <- read.table("C:/RD/censos_picaflores_long.txt",head=T)
# Modelos de mezcla
umf <- unmarkedFramePCount(y = pica[, 2:7])
siteCovs(umf) <- data.frame(pica[, 8:12])
obsCovs(umf) <- data.frame(estacion = as.factor(pica_long$estacion),
autos = pica_long$autos,
personas = pica_long$personas)
fm9 <- pcount(formula = ~ estacion
~ ambiente,
data = umf)
summary(fm9)
lc <- linearComb(fm9, c(1, 0), type="state")  # abundancia en cada ambiente
backTransform(lc)
lc <- linearComb(fm9, c(1, 0), type="det")  # detección en cada estación
backTransform(lc)
summary(fm9)
34286.88 * 3 + 17143.44
install.packages("distill")
install.packages("radix")
library(radix)
setwd("C:/Users/Usuario/Desktop/GitHub/divan")
getwd()
getwd()
getwd()
getwd()
setwd("C:/Users/Usuario/Desktop/GitHub/divan/paper")
getwd()
getwd()
setwd("C:")
setwd("C:/Documents")
getwd()
# Load required packages
library(revtools)
library(ggplot2)
# Load the first .ris file
references1 <- read_bibliography("C:/extdata/scopusITV.bib")
# Extract relevant information for the first set (assuming 'PY' is the field for publication year)
years1 <- sapply(references1$year, as.numeric)
article_counts1 <- table(years1)
data1 <- data.frame(Year = as.numeric(names(article_counts1)), Count = as.numeric(article_counts1))
# Load the second .bib file
references2 <- read_bibliography("C:/extdata/scopusFD.bib")
# Load the second .bib file
references2 <- read_bibliography("C:/extdata/scopusFD.bib")
# Load the first .ris file
references1 <- read_bibliography("C:/extdata/scopusITV.bib")
# Extract relevant information for the first set
years1 <- sapply(references1$year, as.numeric)
article_counts1 <- table(years1)
table(years1)
sum(table(years1))
######################################################################
library(ggplot2)
library(ggdist)
# Matrix of model coefficients
data <- read.table("C:/RD/ITV_mixed_model_coeffs.txt", head = T)
dist_matrix <- as.matrix(data[, -1])
dist_matrix
metric_label <- colnames(dist_matrix)
metric_label
colnames(dist_matrix) <- 1:ncol(dist_matrix)
dist_matrix
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Coefficient")
dist_df$Var1 <- as.factor(rep(colnames(dist_matrix), 10))
dist_df$Var2 <- factor(dist_df$Var2, levels = levels(dist_df$Var1))
dist_df
# Matrix of model coefficients
data <- read.table("C:/RD/ITV_mixed_model_coeffs.txt", head = T)
dist_matrix <- as.matrix(data[, -1])
metric_label <- colnames(dist_matrix)
colnames(dist_matrix) <- 1:ncol(dist_matrix)
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Coefficient")
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Num1 > dist_df$Num2, 1:3]
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Var1 > dist_df$Var2, ]
# Matrix of model coefficients
data <- read.table("C:/RD/ITV_mixed_model_coeffs.txt", head = T)
dist_matrix <- as.matrix(data[, -1])
metric_label <- colnames(dist_matrix)
colnames(dist_matrix) <- 1:ncol(dist_matrix)
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Coefficient")
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Var1 > dist_df$Var2, ]
dist_df
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
dist_df
dist_matrix <- as.matrix(dist(iris[, 1:4]))
dist_matrix
# Matrix of model coefficients
data <- read.table("C:/RD/ITV_mixed_model_coeffs.txt", head = T)
dist_matrix <- as.matrix(data[, -1])
dist_matrix
rownames(dist_matrix) <- 1:ncol(dist_matrix)
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Coefficient")
dist_df
# Matrix of model coefficients
data <- read.table("C:/RD/ITV_mixed_model_coeffs.txt", head = T)
dist_matrix <- as.matrix(data[, -1])
metric_label <- colnames(dist_matrix)
colnames(dist_matrix) <- 1:ncol(dist_matrix)
rownames(dist_matrix) <- 1:ncol(dist_matrix)
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Coefficient")
dist_df
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Var1 > dist_df$Var2, ]
str(dist_df)
# Matrix of model coefficients
data <- read.table("C:/RD/ITV_mixed_model_coeffs.txt", head = T)
dist_matrix <- as.matrix(data[, -1])
metric_label <- colnames(dist_matrix)
colnames(dist_matrix) <- as.numeric(1:ncol(dist_matrix))
rownames(dist_matrix) <- as.numeric(1:ncol(dist_matrix))
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Coefficient")
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Var1 > dist_df$Var2, ]
# Matrix of model coefficients
data <- read.table("C:/RD/ITV_mixed_model_coeffs.txt", head = T)
dist_matrix <- as.matrix(data[, -1])
metric_label <- colnames(dist_matrix)
colnames(dist_matrix) <- 1:ncol(dist_matrix)
rownames(dist_matrix) <- 1:ncol(dist_matrix)
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Coefficient")
dist_df$Var1 <- as.numeric(dist_df$Var1)
dist_df$Var2 <- as.numeric(dist_df$Var2)
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Var1 > dist_df$Var2, ]
# Define a custom color palette similar to ggcorr
my_palette <- c("#2E86C1", "#FFFFFF", "red")
# Define breaks and labels for the legend
breaks <- c(-1, 0, 1)
labels <- c("Negative", "Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = my_palette, breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3) +
geom_text(aes(label = metric_label), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = metric_label), color = "black", size = 4, hjust = 1.2) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = my_palette, breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
p + geom_text(aes(label = metric_label), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = metric_label), color = "black", size = 4, hjust = 1.2) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p + geom_text(aes(label = as.numeric(Var1)), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = as.numeric(Var2)), color = "black", size = 4, hjust = 1.2) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
scale_x_discrete(labels = metric_label) +
scale_y_discrete(labels = metric_label)
p + geom_text(aes(label = as.numeric(Var1)), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = as.numeric(Var2)), color = "black", size = 4, hjust = 1.2)
p + geom_text(aes(label = as.numeric(Var1)), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = as.numeric(Var2)), color = "black", size = 4, hjust = 1.2) +
scale_x_discrete(labels = metric_label) +
scale_y_discrete(labels = metric_label)
p + geom_text(aes(label = metric_label), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = as.numeric(Var2)), color = "black", size = 4, hjust = 1.2) +
scale_x_discrete(labels = metric_label) +
scale_y_discrete(labels = metric_label)
p + geom_text(aes(label = metric_label), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = as.numeric(Var2)), color = "black", size = 4, hjust = 1.2) +
scale_x_discrete("FD", labels = metric_label) +
scale_y_discrete("FD", labels = metric_label)
p +   scale_x_discrete("FD", labels = metric_label) +
scale_y_discrete("FD", labels = metric_label)
p + geom_text(aes(label = metric_label), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = as.numeric(Var2)), color = "black", size = 4, hjust = 1.2) +
scale_x_discrete("FD", labels = metric_label) +
scale_y_discrete("FD", labels = metric_label)
p + geom_text(aes(label = as.numeric(Var1)), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = as.numeric(Var2)), color = "black", size = 4, hjust = 1.2) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
scale_x_discrete(labels = c("New_Label_A", "New_Label_B", "New_Label_C", "New_Label_D")) +
scale_y_discrete(labels = c("New_Label_D", "New_Label_C", "New_Label_B", "New_Label_A"))
p + geom_text(aes(label = as.numeric(Var1)), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = as.numeric(Var2)), color = "black", size = 4, hjust = 1.2) +
scale_x_discrete(labels = c("New_Label_A", "New_Label_B", "New_Label_C", "New_Label_D")) +
scale_y_discrete(labels = c("New_Label_D", "New_Label_C", "New_Label_B", "New_Label_A"))
p +  scale_x_discrete(labels = c("New_Label_A", "New_Label_B", "New_Label_C", "New_Label_D")) +
scale_y_discrete(labels = c("New_Label_D", "New_Label_C", "New_Label_B", "New_Label_A"))
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Define a custom color palette similar to ggcorr
my_palette <- c("#FFFFFF", "#2E86C1","red")
# Define breaks and labels for the legend
breaks <- c(-1, 0, 1)
labels <- c("Negative", "Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = my_palette, breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
range(lower_triangle)
lower_triangle
range(lower_triangle$Coefficient)
# Define breaks and labels for the legend
breaks <- c(0, 1)
labels <- c("Negative", "Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = my_palette, breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Define breaks and labels for the legend
breaks <- c(0, 1)
labels <- c("Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = my_palette, breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Define a custom color palette similar to ggcorr
my_palette <- c("#FFFFFF", "orange","red")
# Define breaks and labels for the legend
breaks <- c(0, 1)
labels <- c("Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = my_palette, breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Define a custom color palette similar to ggcorr
my_palette <- c("#FFFFFF", "yellow","red")
# Define breaks and labels for the legend
breaks <- c(0, 1)
labels <- c("Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = my_palette, breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Define a custom color palette similar to ggcorr
my_palette <- c("#FFFFFF", "yellow2","red")
# Define breaks and labels for the legend
breaks <- c(0, 1)
labels <- c("Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = my_palette, breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = scales::brewer_pal(palette = "Spectral")(10), breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = scales::rev(brewer_pal(palette = "Spectral"))(10), breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = rev(scales::brewer_pal(palette = "Spectral")(10)), breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3) +
scale_x_discrete(labels = c("A", "B", "C", "D", "E", "F", "G", "H", "I")) +
scale_y_discrete(labels =  c("A", "B", "C", "D", "E", "F", "G", "H", "I"))
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3) +
scale_x_discrete("P",labels = c("A", "B", "C", "D", "E", "F", "G", "H", "I")) +
scale_y_discrete("R",labels =  c("A", "B", "C", "D", "E", "F", "G", "H", "I"))
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3) +
scale_x_continuous(labels = c("A", "B", "C", "D", "E", "F", "G", "H", "I")) +
scale_y_continuous(labels =  c("A", "B", "C", "D", "E", "F", "G", "H", "I"))
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3) +
scale_x_continuous("P") +
scale_y_continuous("P")
# Convert continuous variables to factors with custom labels
lower_triangle$Var1 <- factor(lower_triangle$Var1, levels = unique(lower_triangle$Var1), labels = metric_label)
lower_triangle$Var2 <- factor(lower_triangle$Var2, levels = rev(unique(lower_triangle$Var2)), labels = metric_label)
lower_triangle$Var1
metric_label
unique(lower_triangle$Var2)
# Convert continuous variables to factors with custom labels
lower_triangle$Var1 <- factor(lower_triangle$Var1, levels = unique(lower_triangle$Var1), labels = metric_label[2:10])
lower_triangle$Var2 <- factor(lower_triangle$Var2, levels = rev(unique(lower_triangle$Var2)), labels = metric_label[1:9])
# Define breaks and labels for the legend
breaks <- c(0, 1)
labels <- c("Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = rev(scales::brewer_pal(palette = "Spectral")(10)), breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3) +
geom_text(aes(label = Var1), color = "black", size = 4, hjust = -0.2) +
geom_text(aes(label = Var2), color = "black", size = 4, hjust = 1.2)
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3) +
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Matrix of model coefficients
data <- read.table("C:/RD/ITV_mixed_model_coeffs.txt", head = T)
dist_matrix <- as.matrix(data[, -1])
metric_label <- colnames(dist_matrix)
colnames(dist_matrix) <- 1:ncol(dist_matrix)
rownames(dist_matrix) <- 1:ncol(dist_matrix)
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Coefficient")
dist_df$Var1 <- as.numeric(dist_df$Var1)
dist_df$Var2 <- as.numeric(dist_df$Var2)
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Var1 > dist_df$Var2, ]
# Convert continuous variables to factors with custom labels
lower_triangle$Var1 <- factor(lower_triangle$Var1, levels = unique(lower_triangle$Var1), labels = metric_label[2:10])
lower_triangle$Var2 <- factor(lower_triangle$Var2, levels = rev(unique(lower_triangle$Var2)), labels = metric_label[1:9])
lower_triangle
# Define breaks and labels for the legend
breaks <- c(0, 1)
labels <- c("Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = rev(scales::brewer_pal(palette = "Spectral")(10)), breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Var1 < dist_df$Var2, ]
# Convert continuous variables to factors with custom labels
lower_triangle$Var1 <- factor(lower_triangle$Var1, levels = unique(lower_triangle$Var1), labels = metric_label[2:10])
lower_triangle$Var2 <- factor(lower_triangle$Var2, levels = rev(unique(lower_triangle$Var2)), labels = metric_label[1:9])
# Define breaks and labels for the legend
breaks <- c(0, 1)
labels <- c("Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = rev(scales::brewer_pal(palette = "Spectral")(10)), breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Example distance matrix
dist_matrix <- as.matrix(dist(iris[, 1:4]))
# Convert the distance matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Distance")
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Var1 > dist_df$Var2, ]
# Create custom labels for continuous variables
custom_labels <- c("Label A", "Label B", "Label C", "Label D")
# Convert continuous variables to factors with custom labels
lower_triangle$Var1 <- factor(lower_triangle$Var1, levels = unique(lower_triangle$Var1), labels = custom_labels)
lower_triangle
# Matrix of model coefficients
data <- read.table("C:/RD/ITV_mixed_model_coeffs.txt", head = T)
dist_matrix <- as.matrix(data[, -1])
metric_label <- colnames(dist_matrix)
colnames(dist_matrix) <- 1:ncol(dist_matrix)
rownames(dist_matrix) <- 1:ncol(dist_matrix)
# Convert the matrix to a data frame
dist_df <- as.data.frame(as.table(dist_matrix))
names(dist_df) <- c("Var1", "Var2", "Coefficient")
dist_df$Var1 <- as.numeric(dist_df$Var1)
dist_df$Var2 <- as.numeric(dist_df$Var2)
# Filter values below the diagonal
lower_triangle <- dist_df[dist_df$Var1 > dist_df$Var2, ]
# Convert continuous variables to factors with custom labels
lower_triangle$Var1 <- factor(lower_triangle$Var1, levels = unique(lower_triangle$Var1), labels = metric_label[2:10])
lower_triangle$Var2 <- factor(lower_triangle$Var2, levels = rev(unique(lower_triangle$Var2)), labels = metric_label[1:9])
lower_triangle
str(lower_triangle)
unique(lower_triangle$Var2)
rev(unique(lower_triangle$Var2))
lower_triangle$Var2 <- factor(lower_triangle$Var2, levels = unique(lower_triangle$Var2), labels = metric_label[1:9])
# Define breaks and labels for the legend
breaks <- c(0, 1)
labels <- c("Zero", "Positive")
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = rev(scales::brewer_pal(palette = "Spectral")(10)), breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Plotting the lower triangle of the distance matrix with the custom palette
p <- ggplot(lower_triangle, aes(Var2, Var1, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = rev(scales::brewer_pal(palette = "Spectral")(10)), breaks = breaks, labels = labels) +
theme_bw() + xlab("Predictor") + ylab("Response")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
labels <- c("-1.00", "0.00", "1.00")  # Coefficient values
# Plotting the lower triangle of the distance matrix (8x5 in)
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = rev(scales::brewer_pal(palette = "Spectral")(10)), breaks = breaks, labels = labels) +
theme_bw() + xlab("Response") + ylab("Predictor")
labels <- c("0.00", "1.00")  # Coefficient values
# Plotting the lower triangle of the distance matrix (8x5 in)
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = rev(scales::brewer_pal(palette = "Spectral")(10)), breaks = breaks, labels = labels) +
theme_bw() + xlab("Response") + ylab("Predictor")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
# Define breaks and labels for the legend
breaks <- c(0, 0.5, 1)
labels <- c("0.00", "0.50", "1.00")  # Coefficient values
# Plotting the lower triangle of the distance matrix (8x5 in)
p <- ggplot(lower_triangle, aes(Var1, Var2, fill = Coefficient)) +
geom_tile() +
scale_fill_gradientn(colors = rev(scales::brewer_pal(palette = "Spectral")(10)), breaks = breaks, labels = labels) +
theme_bw() + xlab("Response") + ylab("Predictor")
# Add text labels for distance values
p + geom_text(aes(label = sprintf("%.2f", Coefficient)), color = "black", size = 3)
getwd()
# FD and FD+ITV lines
p1 <- ggplot() +
geom_line(data = data1, aes(x = Year, y = Count), size = 2, color = "orange") +
geom_line(data = data2, aes(x = Year, y = Count), size = 2, color = "black") +
labs(title = "",
x = "Year",
y = "Number of articles published",
color = "Set") +
theme_minimal()
# Load the first .ris file
references1 <- read_bibliography("C:/extdata/scopusITV.bib")
# Extract relevant information for the first set
years1 <- sapply(references1$year, as.numeric)

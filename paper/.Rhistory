personas = pica_long$personas)
fm9 <- pcount(formula = ~ estacion
~ ambiente,
data = umf)
# Modelos de mezcla
umf <- unmarkedFramePCount(y = pica[, 2:7])
siteCovs(umf) <- data.frame(pica[, 8:12])
obsCovs(umf) <- data.frame(estacion = as.factor(pica_long$estacion),
autos = pica_long$autos,
personas = pica_long$personas)
fm9 <- pcount(formula = ~ estacion
~ ambiente,
data = umf)
lc <- linearComb(fm9, c(1, 0), type="state")  # abundancia en cada ambiente
backTransform(lc)
lc <- linearComb(fm9, c(1, 1), type="state")
backTransform(lc)
lc <- linearComb(fm9, c(1, 0), type="det")  # detección en cada estación
backTransform(lc)
lc <- linearComb(fm9, c(1, 1), type="det")
backTransform(lc)
Estimate <- c(16.8, 76.1)
SE <- c(11, 32.2)
Ambiente <- c("Calles", "Parques_plazas")
library(ggplot2)
# Create a data frame with your data
data <- data.frame(Ambiente, Estimate, SE)
# Calculate the upper and lower limits for the error bars
data$lower <- data$Estimate - 1.96 * data$SE
data$upper <- data$Estimate + 1.96 * data$SE
# Create the ggplot
plot <- ggplot(data, aes(x = Ambiente, y = Estimate)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +  # Bar plot for means
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, position = position_dodge(width = 0.9)) +  # Error bars
labs(title = "Means and Confidence Intervals",
x = "Ambiente",
y = "Estimate") +
theme_minimal()
plot
# Create a data frame with your data
data <- data.frame(Ambiente, Estimate, SE)
# Create the ggplot
plot <- ggplot(data, aes(x = Ambiente, y = Estimate)) +
geom_point(shape = "o", size = 3) +  # Means represented by circles
geom_errorbar(aes(ymin = Estimate - SE * 1.96, ymax = Estimate + SE * 1.96), width = 0) +  # Remove horizontal lines
labs(title = "Means and Confidence Intervals",
x = "Ambiente",
y = "Estimate") +
theme_minimal() +
theme(axis.line.x = element_blank(),  # Remove x-axis
axis.text.x = element_blank(),  # Remove x-axis labels
panel.grid.major.x = element_blank(),  # Remove vertical gridlines
panel.grid.minor.x = element_blank())  # Remove vertical gridlines
# Create the ggplot
ggplot(data, aes(x = Ambiente, y = Estimate)) +
geom_point(shape = "o", size = 3) +  # Means represented by circles
geom_errorbar(aes(ymin = Estimate - SE * 1.96, ymax = Estimate + SE * 1.96), width = 0) +  # Remove horizontal lines
labs(title = "Means and Confidence Intervals",
x = "Ambiente",
y = "Estimate") +
theme_minimal() +
theme(axis.line.x = element_blank(),  # Remove x-axis
axis.text.x = element_blank(),  # Remove x-axis labels
panel.grid.major.x = element_blank(),  # Remove vertical gridlines
panel.grid.minor.x = element_blank())  # Remove vertical gridlines
# Create the ggplot
ggplot(data, aes(x = Ambiente, y = Estimate)) +
geom_point(size = 5) +  # Means represented by circles
geom_errorbar(aes(ymin = Estimate - SE * 1.96, ymax = Estimate + SE * 1.96), width = 0) +  # Remove horizontal lines
labs(title = "Means and Confidence Intervals",
x = "Ambiente",
y = "Abundancia")
# Create the ggplot
ggplot(data, aes(x = Ambiente, y = Estimate)) +
geom_point(size = 5) +  # Means represented by circles
geom_errorbar(aes(ymin = Estimate - SE * 1.96, ymax = Estimate + SE * 1.96), width = 0) +  # Remove horizontal lines
labs(x = "Ambiente",
y = "Abundancia")
lc <- linearComb(fm9, c(1, 0), type="det")  # detección en cada estación
backTransform(lc)
lc <- linearComb(fm9, c(1, 1), type="det")
backTransform(lc)
Estimate <- c(0.00319, 0.0148)
SE <- c(0.00196, 0.00737)
Estacion <- c("Invierno", "Verano")
# Create a data frame with your data
data <- data.frame(Estacion, Estimate, SE)
# Create the ggplot
ggplot(data, aes(x = Estacion, y = Estimate)) +
geom_point(size = 5) +  # Means represented by circles
geom_errorbar(aes(ymin = Estimate - SE * 1.96, ymax = Estimate + SE * 1.96), width = 0) +  # Remove horizontal lines
labs(x = "Estacion",
y = "Abundancia")
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(mgcv)
library(itsadug)
censos <- read.table("C:/RD/planillas censos may23.txt", head = T)
pri_ver <- subset(censos, estacion == "primavera"| estacion == "verano")
# Calcular riqueza
riqxdiaxtransecta <- pri_ver %>% group_by(dias, ID_transecta) %>% summarise(riqueza = length(unique(sp)),
espacio_verde = espacio_verde) %>%
as.data.frame()
famxsemana <- pri_ver %>% group_by(semana0, ID_transecta) %>% summarise(riqueza = length(unique(familia)), espacio_verde = espacio_verde) %>% as.data.frame()
# Calcular riqueza
riqxdiaxtransecta <- pri_ver %>% group_by(dias, ID_transecta) %>% summarise(riqueza = length(unique(sp)),
espacio_verde = espacio_verde) %>%
as.data.frame()
riqxdiaxtransecta$ID_transecta <- as.factor(riqxdiaxtransecta$ID_transecta)
riqxdiaxtransecta$espacio_verde <- as.factor(riqxdiaxtransecta$espacio_verde)
ggplot(riqxdiaxtransecta, aes(x=dias, y=riqueza)) + geom_point(size=6, aes(colour = factor(espacio_verde)))
ggplot(riqxdiaxtransecta, aes(x=riqueza)) + geom_histogram(color="black", fill="white", bins=12) +
facet_wrap(~espacio_verde)
famxsemana <- pri_ver %>% group_by(semana0, ID_transecta) %>% summarise(riqueza = length(unique(familia)), espacio_verde = espacio_verde) %>% as.data.frame()
ggplot(famxsemana, aes(x=semana0, y=riqueza)) + geom_point(size=6, aes(colour = factor(espacio_verde)))
ggplot(pri_ver, aes(x = semana0, fill = sp)) + geom_bar()
ggplot(pri_ver, aes(x = semana0, fill = familia)) +
geom_bar() + xlab("Semana") + ylab("Número de observaciones")
# Modelos aditivos generalizados mixtos
# Intercepto aleatorio
gamm_riq1 <- gam(riqueza ~ s(dias) + espacio_verde +
s(ID_transecta, bs = "re"),
family = poisson, data = riqxdiaxtransecta)
summary(gamm_riq1)
library(ggplot2)
# Assuming you have already fitted the model gamm_riq1
# Extract the predictions from the model
predictions <- predict(gamm_riq1, newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias), max(riqxdiaxtransecta$dias), length.out = 1000), espacio_verde = levels(riqxdiaxtransecta$espacio_verde)))
head(riqxdiaxtransecta)
anova(gamm_riq1)
plot(gamm_riq1)
# Efectos fijos
plot_smooth(gamm_riq1, view = "dias", plot_all = "espacio_verde", rm.ranef = TRUE)
library(itsadug)
install.packages("itsadug")
library(itsadug)
# Efectos fijos
plot_smooth(gamm_riq1, view = "dias", plot_all = "espacio_verde", rm.ranef = TRUE)
# Efectos fijos
plot_smooth(gamm_riq1, view = "dias", plot_all = "espacio_verde", rm.ranef = FALSE)
predictions <- predict(gamm_riq1, newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias), max(riqxdiaxtransecta$dias), length.out = 1000)))
### Con ggplot
gam_riq1 <- gam(riqueza ~ s(dias) + espacio_verde,
family = poisson, data = riqxdiaxtransecta)
# Extract the predictions from the model
predictions <- predict(gamm_riq1,
newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias),
riqxdiaxtransecta$dias), length.out = 1000),
espacio_verde = levels(riqxdiaxtransecta$espacio_verde))
min(riqxdiaxtransecta$dias)
levels(riqxdiaxtransecta$espacio_verde)
seq(min(riqxdiaxtransecta$dias),
riqxdiaxtransecta$dias), length.out = 1000
seq(min(riqxdiaxtransecta$dias),
riqxdiaxtransecta$dias), length.out = 1000)
# Extract the predictions from the model
predictions <- predict(gamm_riq1,
newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
espacio_verde = levels(riqxdiaxtransecta$espacio_verde)))
# Extract the predictions from the model
predictions <- predict(gam_riq1,
newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
espacio_verde = levels(riqxdiaxtransecta$espacio_verde)))
# Create a data frame with the predictions
plot_data <- data.frame(dias = rep(seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
each = length(levels(riqxdiaxtransecta$espacio_verde))),
espacio_verde = rep(levels(riqxdiaxtransecta$espacio_verde),
each = 1000),
predicted_riqueza = predictions)
# Create a data frame with the predictions
plot_data <- data.frame(dias = rep(seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
each = length(levels(riqxdiaxtransecta$espacio_verde))),
espacio_verde = rep(levels(riqxdiaxtransecta$espacio_verde),
each = 1000),
predicted_riqueza = predictions)
# Create the plot
ggplot(plot_data, aes(x = dias, y = predicted_riqueza, color = espacio_verde)) +
geom_line() +
labs(x = "Number of Days", y = "Predicted Riqueza") +
theme_minimal()
head(predictions)
head(plot_data)
# Create the plot
ggplot(plot_data, aes(x = dias, y = predicted_riqueza, color = espacio_verde)) +
geom_line() +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
rep(seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
each = 2)
# Create a data frame with the predictions
plot_data <- data.frame(dias = rep(seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
each = 2),
espacio_verde = rep(levels(riqxdiaxtransecta$espacio_verde),
each = 1000),
predicted_riqueza = predictions)
dias = rep(seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000)
)
dias = rep(seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
each = 2)
# Create a data frame with the predictions
plot_data <- data.frame(dias = rep(seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
each = 2),
espacio_verde = c("no", "si"),
predicted_riqueza = predictions)
# Extract the predictions from the model
newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
espacio_verde = levels(riqxdiaxtransecta$espacio_verde))
head(newdata)
# Extract the predictions from the model
newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
espacio_verde = c("no", "si"))
# Extract the predictions from the model
newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
espacio_verde = rep(c("no", "si"), 2000))
rep(c("no", "si"), 2000)
# Extract the predictions from the model
newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
espacio_verde = rep(c("no", "si"), 1000))
head(newdata)
predictions <- predict(gam_riq1, newdata)
newdata$predictions  <- predict(gam_riq1, newdata)
head(newdata)
# Create the plot
ggplot(predictions, aes(x = dias, y = predictions, color = espacio_verde)) +
geom_line() +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
class(newdata)
newdata$predicted  <- predict(gam_riq1, newdata)
head(newdata)
# Create the plot
ggplot(predictions, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
ggplot(predictions, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line()
str(predictions)
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() + geom_point(riqxdiaxtransecta, aes(x = dias, y = riqueza)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
head(riqxdiaxtransecta)
# Create the plot
ggplot() +
geom_line(newdata, aes(x = dias, y = predicted, color = espacio_verde)) + geom_point(riqxdiaxtransecta, aes(x = dias, y = riqueza)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
ggplot(data = newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() +
geom_point(data = riqxdiaxtransecta, aes(x = dias, y = riqueza, color = espacio_verde)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() + geom_point(riqxdiaxtransecta, aes(x = dias, y = riqueza)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() + geom_point(riqxdiaxtransecta, aes(x = dias, y = riqueza, color = espacio_verde)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() +
geom_point(data = riqxdiaxtransecta, aes(x = dias, y = riqueza, color = espacio_verde)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() +
# geom_point(data = riqxdiaxtransecta, aes(x = dias, y = riqueza, color = espacio_verde)) +
geom_errorbar(data = riqxdiaxtransecta, aes(x = dias, ymin = riqueza - se, ymax = riqueza + se, color = espacio_verde), width = 0.2) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
# Create the plot
se <- 0.5
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() +
# geom_point(data = riqxdiaxtransecta, aes(x = dias, y = riqueza, color = espacio_verde)) +
geom_errorbar(data = riqxdiaxtransecta, aes(x = dias, ymin = riqueza - se, ymax = riqueza + se, color = espacio_verde), width = 0.2) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
### Con ggplot
gam_riq1 <- gam(riqueza ~ s(dias, k = 3) + espacio_verde,
family = poisson, data = riqxdiaxtransecta)
summary(gam_riq1)
# Extract the predictions from the model
newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
espacio_verde = rep(c("no", "si"), 1000))
newdata$predicted  <- predict(gam_riq1, newdata)
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() +
geom_point(data = riqxdiaxtransecta, aes(x = dias, y = riqueza, color = espacio_verde)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
newdata$predicted  <- predict(gam_riq1, newdata, type = "link")
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() +
geom_point(data = riqxdiaxtransecta, aes(x = dias, y = riqueza, color = espacio_verde)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
### Con ggplot
gam_riq1 <- gam(riqueza ~ s(dias, k = 3) + espacio_verde,
family = poisson, data = riqxdiaxtransecta)
# Extract the predictions from the model
newdata = data.frame(dias = seq(min(riqxdiaxtransecta$dias),
max(riqxdiaxtransecta$dias), length.out = 1000),
espacio_verde = rep(c("no", "si"), 1000))
newdata$predicted  <- predict(gam_riq1, newdata, type = "link")
head(newdata)
newdata$predicted  <- predict(gam_riq1, newdata, type = "response")
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line() +
geom_point(data = riqxdiaxtransecta, aes(x = dias, y = riqueza, color = espacio_verde)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line(size = 2) +
geom_point(data = riqxdiaxtransecta, aes(x = dias, y = riqueza, color = espacio_verde)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
# Create the plot
ggplot(newdata, aes(x = dias, y = predicted, color = espacio_verde)) +
geom_line(size = 2) +
geom_point(data = riqxdiaxtransecta,
aes(x = dias, y = riqueza, color = espacio_verde, size = 2)) +
labs(x = "Dias", y = "Riqueza") +
theme_minimal()
shiny::runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
library(FD)
library(entropart)
library(ggplot2)
aves <- read.table("C:/RD/Censos Isa_aves.txt", head=T)
rasgos_aves <- read.table("C:/RD/Censos Isa_traits.txt", head=T)
rownames(rasgos_aves) <- rasgos_aves$Codigo
plantas <- read.table("C:/RD/Censos Isa_plantas.txt", head=T)
PAaves <- 1*(aves[,-1]>0)
riq_aves <- rowSums(PAaves)
abund_aves <- rowSums(aves[,-1])
div_aves <- apply(aves[,-1], 1, function(x) bcShannon(x))
divF_aves <- dbFD(x = rasgos_aves[,-1], a = aves[,-1])
divF_aves$FRic
ggplot(data = df, aes(x = x, y = y)) + geom_point(size = 5) +
xlab("Abundancia de plantas") + ylab("Regularidad funcional") +
theme(axis.text=element_text(size=15),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
df <- data.frame(x = abund_plantas, y = divF_aves$FEve)
library(FD)
library(entropart)
library(ggplot2)
aves <- read.table("C:/RD/Censos Isa_aves.txt", head=T)
rasgos_aves <- read.table("C:/RD/Censos Isa_traits.txt", head=T)
rownames(rasgos_aves) <- rasgos_aves$Codigo
plantas <- read.table("C:/RD/Censos Isa_plantas.txt", head=T)
PAaves <- 1*(aves[,-1]>0)
riq_aves <- rowSums(PAaves)
abund_aves <- rowSums(aves[,-1])
div_aves <- apply(aves[,-1], 1, function(x) bcShannon(x))
divF_aves <- dbFD(x = rasgos_aves[,-1], a = aves[,-1])
divF_aves$FRic
divF_aves$FEve
divF_aves$FDiv
plot(riq_aves, divF_aves$FRic)
cor.test(riq_aves, divF_aves$FRic, method="spearman")
cor(abund_aves, divF_aves$FRic)
plot(riq, divF_aves$FEve)
plot(riq_aves, divF_aves$FRic)
df <- data.frame(x = riq_aves, y = divF_aves$FRic)
df <- data.frame(x = riq_aves, y = divF_aves$FRic)
ggplot(data = df, aes(x = x, y = y)) + geom_point(size = 5) +
xlab("# de especies") + ylab("Riqueza funcional") +
theme(axis.text=element_text(size=15),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
divF_aves$FRic
ggplot(data = df, aes(x = x, y = y)) + geom_point(size = 5) +
xlab("# de especies") + ylab("Riqueza funcional") +
theme(axis.text=element_text(size=15),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(data = df, aes(x = x, y = y)) + geom_point(size = 5) +
xlab("# de especies") + ylab("Riqueza funcional") +
theme(axis.text=element_text(size=15),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth", size = 2)
ggplot(data = df, aes(x = x, y = y)) + geom_point(size = 5) +
xlab("# de especies") + ylab("Riqueza funcional") +
theme(axis.text=element_text(size=15),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth", size = 2) + theme_bw()
df <- data.frame(x = abund_plantas, y = divF_aves$FEve)
ggplot(data = df, aes(x = x, y = y)) + geom_point(size = 5) +
xlab("Abundancia de plantas") + ylab("Regularidad funcional de aves") +
theme(axis.text=element_text(size=15),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth", size = 2) + theme_bw()
abund_plantas <- rowSums(plantas[,-c(1,2)])
PAplantas <- 1*(plantas[,-c(1,2)]>0)
riq_plantas <- rowSums(PAplantas)
df <- data.frame(x = abund_plantas, y = divF_aves$FEve)
ggplot(data = df, aes(x = x, y = y)) + geom_point(size = 5) +
xlab("Abundancia de plantas") + ylab("Regularidad funcional de aves") +
theme(axis.text=element_text(size=15),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth", size = 2) + theme_bw()
ggplot(data = plantas, aes(x = LDMC)) +
xlab("LDMC") + ylab("Frecuencia") +
geom_histogram()
head(plantas)
ldmc <- read.table("C:/RD/LDMC bosque.txt",head=T)
ldmc <- read.table("C:/RD/LDMC bosque.txt",head=T)
head(ldmc)
ldmc$LDMC <- ldmc$Peso_seco/ldmc$Peso_humedo*1000
ggplot(data = ldmc, aes(x = LDMC)) +
xlab("LDMC") + ylab("Frecuencia") +
geom_histogram()
ggplot(data = ldmc, aes(x = LDMC)) +
xlab("LDMC") + ylab("Frecuencia") +
geom_histogram(bins = 10)
ggplot(data = ldmc, aes(x = LDMC)) +
xlab("LDMC") + ylab("Frecuencia") +
geom_histogram(bins = 10, color="black", fill="white")
ggplot(data = ldmc, aes(x = LDMC)) +
xlab("LDMC (mg/g)") + ylab("Frecuencia") +
geom_histogram(bins = 10, color="black", fill="white") +
theme_bw()
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
library(rsconnect)
rsconnect::setAccountInfo(name='facuxpalacio', token='4DD42851518826F58EDB1F11BFBB2BB7', secret='uDj54sk5BO91LLxggImDD6+rr7fiVdHocyZ+ysOZ')
deployApp()
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
runApp('C:/Users/Usuario/Desktop/GitHub/divan/R')
install.packages("pkgbuild")
library(unmarked)
library(AICcmodavg)
library(MuMIn)
pica <- read.table("C:/RD/censos_picaflores.txt",head=T)
pica_long <- read.table("C:/RD/censos_picaflores_long.txt",head=T)
# Modelos de mezcla
umf <- unmarkedFramePCount(y = pica[, 2:7])
siteCovs(umf) <- data.frame(pica[, 8:12])
obsCovs(umf) <- data.frame(estacion = as.factor(pica_long$estacion),
autos = pica_long$autos,
personas = pica_long$personas)
fm9 <- pcount(formula = ~ estacion
~ ambiente,
data = umf)
summary(fm9)
lc <- linearComb(fm9, c(1, 0), type="state")  # abundancia en cada ambiente
backTransform(lc)
lc <- linearComb(fm9, c(1, 0), type="det")  # detección en cada estación
backTransform(lc)
summary(fm9)
34286.88 * 3 + 17143.44
install.packages("distill")
install.packages("radix")
library(radix)
setwd("C:/Users/Usuario/Desktop/GitHub/divan")
getwd()
getwd()
getwd()
getwd()
setwd("C:/Users/Usuario/Desktop/GitHub/divan/paper")
getwd()
getwd()
setwd("C:")
setwd("C:/Documents")
